From daf58392ee6feab2d20ddce5c2c81f7aacb302dd Mon Sep 17 00:00:00 2001
From: Mick Sayson <mick@sayson.com>
Date: Wed, 18 Sep 2024 21:35:47 -0700
Subject: [PATCH] Proof of concept pci device

---
 hw/misc/Kconfig     |   5 +++
 hw/misc/meson.build |   1 +
 hw/misc/sphaero.c   | 103 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 109 insertions(+)
 create mode 100644 hw/misc/sphaero.c

diff --git a/hw/misc/Kconfig b/hw/misc/Kconfig
index 1e08785b8..a20f37ad7 100644
--- a/hw/misc/Kconfig
+++ b/hw/misc/Kconfig
@@ -71,8 +71,13 @@ config IVSHMEM_DEVICE
     bool
     default y if PCI_DEVICES
     depends on PCI && LINUX && IVSHMEM && MSI_NONBROKEN
 
+config SPHAERO_DEVICE
+    bool
+    default y if PCI_DEVICES
+    depends on PCI
+
 config ECCMEMCTL
     bool
     select ECC
 
diff --git a/hw/misc/meson.build b/hw/misc/meson.build
index 2ca8717be..956f1a0f1 100644
--- a/hw/misc/meson.build
+++ b/hw/misc/meson.build
@@ -37,8 +37,9 @@ system_ss.add(when: 'CONFIG_SIFIVE_U_PRCI', if_true: files('sifive_u_prci.c'))
 
 subdir('macio')
 
 system_ss.add(when: 'CONFIG_IVSHMEM_DEVICE', if_true: files('ivshmem.c'))
+system_ss.add(when: 'CONFIG_SPHAERO_DEVICE', if_true: files('sphaero.c'))
 
 system_ss.add(when: 'CONFIG_ALLWINNER_SRAMC', if_true: files('allwinner-sramc.c'))
 system_ss.add(when: 'CONFIG_ALLWINNER_A10_CCM', if_true: files('allwinner-a10-ccm.c'))
 system_ss.add(when: 'CONFIG_ALLWINNER_A10_DRAMC', if_true: files('allwinner-a10-dramc.c'))
diff --git a/hw/misc/sphaero.c b/hw/misc/sphaero.c
new file mode 100644
index 000000000..84f4eec2f
--- /dev/null
+++ b/hw/misc/sphaero.c
@@ -0,0 +1,103 @@
+#include "qemu/osdep.h"
+#include "hw/pci/pci_device.h"
+
+#define TYPE_SPHAERO "sphaero"
+OBJECT_DECLARE_SIMPLE_TYPE(SphaeroState, SPHAERO)
+typedef struct SphaeroState
+{
+   PCIDevice parent_obj;
+
+   int32_t r;
+   int32_t g;
+   int32_t b;
+
+   MemoryRegion bar;
+
+} SphaeroState;
+
+static void write_led_values(SphaeroState* s) {
+    FILE* f = fopen("test.svg", "w");
+    fprintf(f, " \
+<svg version=\"1.1\" \
+     width=\"100\" height=\"100\" \
+     xmlns=\"http://www.w3.org/2000/svg\"> \
+ \
+  <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"#%02x%02x%02x\" /> \
+ \
+</svg> ", s->r, s->g, s-> b);
+    fclose(f);
+}
+static void sphaero_write(void *opaque,
+                  hwaddr addr,
+                  uint64_t data,
+                  unsigned size) {
+    SphaeroState* s = opaque;
+    switch (addr) {
+        case 0: s->r = data; break;
+        case 4: s->g = data; break;
+        case 8: s->b = data; break;
+        default: return;
+    }
+
+    write_led_values(s);
+}
+
+
+static uint64_t sphaero_read(void *opaque,
+                 hwaddr addr,
+                 unsigned size) {
+    SphaeroState* s = opaque;
+
+    switch (addr) {
+        case 0: return s->r; break;
+        case 4: return s->g; break;
+        case 8: return s->b; break;
+        default: return ~0;
+    }
+}
+
+static const MemoryRegionOps sphaero_ops = {
+    .write = sphaero_write,
+    .read = sphaero_read,
+};
+
+static void pci_sphaero_realize(PCIDevice *dev, Error **errp)
+{
+    printf("Hi mom, i'm a pci device\n");
+
+    SphaeroState *s = SPHAERO(dev);
+
+    memory_region_init_io(&s->bar, OBJECT(s), &sphaero_ops, s,
+                          "sphaero", 32);
+
+    pci_register_bar(dev, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &s->bar);
+
+}
+
+static void sphaero_class_init(ObjectClass *klass, void *data)
+{
+    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);
+
+    k->vendor_id = 0xaaaa;
+    k->device_id = 0xaaaa;
+    k->realize = pci_sphaero_realize;
+}
+
+static const TypeInfo sphaero_info = {
+   .name = TYPE_SPHAERO,
+   .parent = TYPE_PCI_DEVICE,
+   .instance_size = sizeof(SphaeroState),
+   .class_init    = sphaero_class_init,
+   .interfaces = (InterfaceInfo[]) {
+       { INTERFACE_CONVENTIONAL_PCI_DEVICE },
+       { },
+   },
+};
+
+static void my_device_register_types(void)
+{
+   type_register_static(&sphaero_info);
+}
+
+type_init(my_device_register_types)
+
-- 
2.44.1

