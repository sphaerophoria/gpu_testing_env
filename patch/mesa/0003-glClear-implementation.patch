From d844fca10331abaaaebae960af4b8e11ea49a1b6 Mon Sep 17 00:00:00 2001
From: Mick Sayson <mick@sayson.com>
Date: Mon, 14 Oct 2024 20:33:04 +0000
Subject: [PATCH 3/3] glClear() implementation

Add APIs required for a glClear() to show up on our GPU. Allocate a
hardware backed texture, and use that as the render target for glClear()
commands. These are implemented with some new ioctls

Lots of new functions, implementation guided by crashes :)

Only single color buffer is supported, other inputs will likely crash or
do the wrong thing

Implementation details:
* Remove some annoying printf spam
* Allow XRGB formats. The DRM framebuffers have no alpha
* Add GPU backed texture resource allocation
* Add a sphaero_context to track the currently bound framebuffer
* Add a sphaero_screen to track the file descriptor of our GPU
* Pull in sphaero_drm to talk to our GPU
---
 include/drm-uapi/sphaero_drm.h                |   1 +
 .../winsys/sphaero/drm/sphaero_drm_winsys.c   | 188 ++++++++++++++++--
 2 files changed, 173 insertions(+), 16 deletions(-)
 create mode 120000 include/drm-uapi/sphaero_drm.h

diff --git a/include/drm-uapi/sphaero_drm.h b/include/drm-uapi/sphaero_drm.h
new file mode 120000
index 0000000..ff06341
--- /dev/null
+++ b/include/drm-uapi/sphaero_drm.h
@@ -0,0 +1 @@
+../../../linux-6.11/include/uapi/drm/sphaero_drm.h
\ No newline at end of file
diff --git a/src/gallium/winsys/sphaero/drm/sphaero_drm_winsys.c b/src/gallium/winsys/sphaero/drm/sphaero_drm_winsys.c
index bf32e37..581659b 100644
--- a/src/gallium/winsys/sphaero/drm/sphaero_drm_winsys.c
+++ b/src/gallium/winsys/sphaero/drm/sphaero_drm_winsys.c
@@ -1,9 +1,14 @@
 
 #include "sphaero_drm_public.h"
 #include "pipe/p_screen.h"
+#include "pipe/p_state.h"
+#include "pipe/p_context.h"
 #include "util/u_memory.h"
 #include "util/u_screen.h"
+#include "util/u_inlines.h"
+#include "drm-uapi/sphaero_drm.h"
+#include <xf86drm.h>
 #include "util/format/u_format.h"
 
 static int sphaero_get_screen_fd(struct pipe_screen *screen) {
    return -1;
@@ -22,17 +27,28 @@ static int sphaero_drm_get_param(struct pipe_screen *screen, enum pipe_cap param
 }
 static float
 sphaero_drm_get_paramf(struct pipe_screen *screen, enum pipe_capf param)
 {
-   printf("Unhandled pipe_capf param %d\n", param);
    return 0.0f;
 }
 
 static int
 sphaero_drm_get_shader_param(struct pipe_screen *screen,
                        enum pipe_shader_type shader,
                        enum pipe_shader_cap param) {
-   printf("Got shader request for shader %d param %d\n", shader, param);
+   switch (shader) {
+      case PIPE_SHADER_FRAGMENT: {
+
+         switch(param) {
+            case PIPE_SHADER_CAP_MAX_TEXTURE_SAMPLERS: {
+               return 1;
+            }
+            default: break;
+         }
+         break;
+      };
+      default: break;
+   }
    return 0;
 }
 
 static bool sphaero_drm_is_format_supported(struct pipe_screen *screen,
@@ -41,31 +57,171 @@ static bool sphaero_drm_is_format_supported(struct pipe_screen *screen,
                             unsigned sample_count,
                             unsigned storage_sample_count,
                             unsigned bindings) {
 
-   if (format != PIPE_FORMAT_BGRA8888_UNORM) {
+   if (format != PIPE_FORMAT_BGRA8888_UNORM && format != PIPE_FORMAT_BGRX8888_UNORM) {
       return false;
    }
-   printf("format: %d, sample count: %d, storage_sample_count: %d\n", format, sample_count, storage_sample_count);
-   if (format == PIPE_FORMAT_BGRA8888_UNORM && sample_count < 2 && storage_sample_count < 2) {
-      printf("It's supported\n");
+   if (sample_count < 2 && storage_sample_count < 2) {
       return true;
    }
-   printf("It's rejected\n");
    return false;
 }
 
 static void sphaero_drm_destroy(struct pipe_screen * screen) {
    FREE(screen);
 }
 
+struct sphaero_resource {
+   struct pipe_resource pr;
+   uint32_t handle;
+};
+
+struct sphaero_context {
+   struct pipe_context pc;
+   struct sphaero_resource* bound_texture;
+};
+
+struct sphaero_screen {
+   struct pipe_screen ps;
+   int fd;
+};
+
+static void sphaero_ctx_set_framebuffer_state(struct pipe_context *pc,
+                              const struct pipe_framebuffer_state *state) {
+   struct sphaero_context* ctx = (struct sphaero_context*)pc;
+   ctx->bound_texture = (struct sphaero_resource*)state->cbufs[0]->texture;
+}
+
+static struct pipe_surface *sphaero_ctx_create_surface(struct pipe_context *ctx,
+                                                struct pipe_resource *texture,
+                                                const struct pipe_surface *surf_tmpl)
+{
+   struct pipe_surface *surface = CALLOC_STRUCT(pipe_surface);
+
+   if (!surface)
+      return NULL;
+   pipe_reference_init(&surface->reference, 1);
+   pipe_resource_reference(&surface->texture, texture);
+   surface->context = ctx;
+   surface->format = surf_tmpl->format;
+   surface->width = texture->width0;
+   surface->height = texture->height0;
+   surface->texture = texture;
+   surface->u.tex.first_layer = surf_tmpl->u.tex.first_layer;
+   surface->u.tex.last_layer = surf_tmpl->u.tex.last_layer;
+   surface->u.tex.level = surf_tmpl->u.tex.level;
+
+   return surface;
+}
+
+static void sphaero_ctx_surface_destroy(struct pipe_context *ctx,
+                        struct pipe_surface *surface) {
+   pipe_resource_reference(&surface->texture, NULL);
+   FREE(surface);
+}
+
+static void sphaero_ctx_clear(struct pipe_context *pc,
+              unsigned buffers,
+              const struct pipe_scissor_state *scissor_state,
+              const union pipe_color_union *color,
+              double depth,
+              unsigned stencil) {
+   struct sphaero_context *ctx = (struct sphaero_context*)pc;
+   struct sphaero_screen *screen = (struct sphaero_screen*)ctx->pc.screen;
+
+   // FIXME: use depth/stencil/buffers/etc.
+   struct drm_sphaero_gl_clear clear_req = {
+      .handle = ctx->bound_texture->handle,
+   };
+   if (scissor_state) {
+      clear_req.minx = scissor_state->minx;
+      clear_req.miny = scissor_state->miny;
+      clear_req.maxx = scissor_state->maxx;
+      clear_req.maxy = scissor_state->maxy;
+   }
+   memcpy(clear_req.color, color->ui, 4 * sizeof(uint32_t));
+
+   if (drmIoctl(screen->fd, DRM_IOCTL_SPHAERO_GL_CLEAR, &clear_req)) {
+      printf("clear failed\n");
+   }
+}
+
+static void sphaero_ctx_flush(struct pipe_context *pc,
+              struct pipe_fence_handle **fence,
+              unsigned flags) {
+   struct sphaero_context *ctx = (struct sphaero_context*)pc;
+   if (fence) {
+      *fence = NULL;
+   }
+}
+
+static void sphaero_ctx_flush_resource(struct pipe_context *ctx,
+                       struct pipe_resource *resource) {
+
+}
+
+static struct pipe_context* sphaero_context_create(struct pipe_screen *screen,
+                                        void *priv, unsigned flags) {
+   struct sphaero_context* ctx = CALLOC_STRUCT(sphaero_context);
+   ctx->pc.screen = screen;
+   ctx->pc.create_surface = sphaero_ctx_create_surface;
+   ctx->pc.surface_destroy = sphaero_ctx_surface_destroy;
+   ctx->pc.set_framebuffer_state = sphaero_ctx_set_framebuffer_state;
+   ctx->pc.clear = sphaero_ctx_clear;
+   ctx->pc.flush = sphaero_ctx_flush;
+   ctx->pc.flush_resource = sphaero_ctx_flush_resource;
+   return &ctx->pc;
+}
+
+
+static struct pipe_resource* sphaero_drm_resource_create(struct pipe_screen *ps,
+                                          const struct pipe_resource *templat) {
+   struct sphaero_screen* screen = (struct sphaero_screen*)ps;
+   struct sphaero_resource* ret = CALLOC_STRUCT(sphaero_resource);
+   ret->pr = *templat;
+   ret->pr.screen = ps;
+   struct drm_sphaero_create_gl_tex create_req = {
+      .width = ret->pr.width0,
+      .height = ret->pr.height0,
+   };
+   if (drmIoctl(screen->fd, DRM_IOCTL_SPHAERO_CREATE_GL_TEX, &create_req)) {
+      // FIXME: Free resource
+      printf("create tex failed\n");
+      // FIXME: Check if this is legal
+      return NULL;
+   }
+   pipe_reference_init(&ret->pr.reference, 1);
+   ret->handle = create_req.handle;
+   return &ret->pr;
+}
+
+static bool sphaero_drm_resource_get_handle(struct pipe_screen *screen,
+                            struct pipe_context *context,
+                            struct pipe_resource *tex,
+                            struct winsys_handle *handle,
+                            unsigned usage) {
+   struct sphaero_resource* res = (struct sphaero_resource*)tex;
+   handle->stride = tex->width0 * 4;
+   handle->handle = res->handle;
+   handle->offset = 0;
+   handle->format = tex->format;
+   handle->modifier = 0;
+   handle->size = tex->width0 * tex->height0 * 4;
+   return true;
+}
+
 struct pipe_screen *sphaero_drm_screen_create(int fd, const struct pipe_screen_config *config) {
-   struct pipe_screen *screen = CALLOC_STRUCT(pipe_screen);
-
-   screen->get_param = sphaero_drm_get_param;
-   screen->get_paramf = sphaero_drm_get_paramf;
-   screen->get_screen_fd = sphaero_get_screen_fd;
-   screen->get_shader_param = sphaero_drm_get_shader_param;
-   screen->is_format_supported = sphaero_drm_is_format_supported;
-   screen->destroy = sphaero_drm_destroy;
-   return screen;
+   struct sphaero_screen *screen = CALLOC_STRUCT(sphaero_screen);
+   screen->fd = fd;
+
+   screen->ps.get_param = sphaero_drm_get_param;
+   screen->ps.get_paramf = sphaero_drm_get_paramf;
+   screen->ps.get_screen_fd = sphaero_get_screen_fd;
+   screen->ps.get_shader_param = sphaero_drm_get_shader_param;
+   screen->ps.is_format_supported = sphaero_drm_is_format_supported;
+   screen->ps.destroy = sphaero_drm_destroy;
+   screen->ps.context_create = sphaero_context_create;
+   screen->ps.resource_create = sphaero_drm_resource_create;
+   screen->ps.resource_get_handle = sphaero_drm_resource_get_handle;
+   return &screen->ps;
 }
-- 
2.44.1

