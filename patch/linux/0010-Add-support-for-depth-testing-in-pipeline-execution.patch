From 5766679eb6eaf4c2a738ad5bc241ccf408f73c1a Mon Sep 17 00:00:00 2001
From: Mick Sayson <mick@sayson.com>
Date: Mon, 4 Nov 2024 23:18:57 +0000
Subject: [PATCH 10/11] Add support for depth testing in pipeline execution

* Add depth texture parameters to clear call
* Add depth texture parameters to pipeline execution
---
 drivers/gpu/drm/sphaero/sphaero_drv.c | 23 ++++++++++++++++++-----
 include/uapi/drm/sphaero_drm.h        |  3 +++
 2 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/sphaero/sphaero_drv.c b/drivers/gpu/drm/sphaero/sphaero_drv.c
index 587ff0f73..bd1d6ee26 100644
--- a/drivers/gpu/drm/sphaero/sphaero_drv.c
+++ b/drivers/gpu/drm/sphaero/sphaero_drv.c
@@ -556,21 +556,31 @@ static int sphaero_gpu_gl_clear_ioctl(struct drm_device *dev, void *data,
 	struct sphaero_priv* priv = dev->dev_private;
 	struct drm_sphaero_gl_clear *params = data;
 	struct drm_gem_object* obj = drm_gem_object_lookup(file, params->handle);
 	struct drm_gem_sphaero_obj* sphaero_obj = container_of(obj, struct drm_gem_sphaero_obj, base);
+
+	struct drm_gem_object* depth_obj = drm_gem_object_lookup(file, params->depth_handle);
+	struct drm_gem_sphaero_obj* sphaero_depth_obj = container_of(depth_obj, struct drm_gem_sphaero_obj, base);
+
 	priv->regs[1] = sphaero_obj->hw_id;
 	priv->regs[2] = sphaero_obj->hw_id >> 32;
 	priv->regs[3] = params->color[0];
 	priv->regs[4] = params->color[1];
 	priv->regs[5] = params->color[2];
 	priv->regs[6] = params->color[3];
-	priv->regs[7] = params->minx;
-	priv->regs[8] = params->maxx;
-	priv->regs[9] = params->miny;
-	priv->regs[10] = params->maxy;
+
+	priv->regs[7] = sphaero_depth_obj->hw_id;
+	priv->regs[8] = sphaero_depth_obj->hw_id >> 32;
+	priv->regs[9] = params->depth;
+
+	priv->regs[10] = params->minx;
+	priv->regs[11] = params->maxx;
+	priv->regs[12] = params->miny;
+	priv->regs[13] = params->maxy;
 	priv->regs[0] = SPHAERO_REG_CMD_GL_CLEAR;
 
 	drm_gem_object_put(obj);
+	drm_gem_object_put(depth_obj);
 
 	// FIXME: GPU needs to tell us when it is done with the texture so we can release it or something
 
 	return 0;
@@ -593,8 +603,9 @@ static int sphaero_gpu_exec_shader_pipeline(struct drm_device *dev, void *data,
 	uint64_t vb = sphaero_gpu_hw_id_from_gem_obj(drm_gem_object_lookup(file, params->vb_handle));
 	uint64_t format = sphaero_gpu_hw_id_from_gem_obj(drm_gem_object_lookup(file, params->format_handle));
 	uint64_t ubo = sphaero_gpu_hw_id_from_gem_obj(drm_gem_object_lookup(file, params->ubo_handle));
 	uint64_t texture = sphaero_gpu_hw_id_from_gem_obj(drm_gem_object_lookup(file, params->texture_handle));
+	uint64_t depth_texture = sphaero_gpu_hw_id_from_gem_obj(drm_gem_object_lookup(file, params->depth_texture_handle));
 
 	priv->regs[1] = vs;
 	priv->regs[2] = vs >> 32;
 	priv->regs[3] = fs;
@@ -606,9 +617,11 @@ static int sphaero_gpu_exec_shader_pipeline(struct drm_device *dev, void *data,
 	priv->regs[9] = ubo;
 	priv->regs[10] = ubo >> 32;
 	priv->regs[11] = texture;
 	priv->regs[12] = texture >> 32;
-	priv->regs[13] = params->num_inputs;
+	priv->regs[13] = depth_texture;
+	priv->regs[14] = depth_texture >> 32;
+	priv->regs[15] = params->num_inputs;
 	priv->regs[0] = SPHAERO_REG_CMD_EXEC_SHADER_PIPELINE;
 
 	return 0;
 }
diff --git a/include/uapi/drm/sphaero_drm.h b/include/uapi/drm/sphaero_drm.h
index 595915e80..4e5ae842a 100644
--- a/include/uapi/drm/sphaero_drm.h
+++ b/include/uapi/drm/sphaero_drm.h
@@ -33,8 +33,10 @@ struct drm_sphaero_create_gl_tex {
 struct drm_sphaero_gl_clear {
 	// inputs
 	__u32 handle;
 	__u32 color[4]; // f32s bitcast to u32s
+	__u32 depth_handle;
+	__u32 depth; // actually a u32
 	__u32 minx;
 	__u32 maxx;
 	__u32 miny;
 	__u32 maxy;
@@ -55,8 +57,9 @@ struct drm_sphaero_exec_shader_pipeline {
 	__u32 vb_handle;
 	__u32 ubo_handle;
 	__u32 format_handle;
 	__u32 texture_handle;
+	__u32 depth_texture_handle;
 	__u32 num_inputs;
 };
 
 
-- 
2.44.1

